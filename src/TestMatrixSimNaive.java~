ut.println(N + " less than " + CONST);
        transpose(A, m, n, N);
    }

    // Use COA and transpose first across diagonal and then swap upper right 
    // and lower right matrices using recursion
    else {

        transposeOnDiag(A, m, n, N / 2);        // upper left submatrix

        transposeOnDiag(A, m + N / 2, n + N / 2, (int) Math.ceil(N / 2.0)); // lower right submatrix

        transposeAndSwap(A, m, n + N / 2, N / 2, (int) Math.ceil(N / 2.0)); //swap upper right and lower left

    }
    }

    /**
     * swap upper right and lower right matrices using recursion
     * 
     * @param A
     *            matrix
     * @param m
     *            first (x) coordinate of matrix
     * @param n
     *            first (y) coordinate of matrix
     * @param N
     *            size of vertical dimension (rows)
     * @param M
     *            size of horizontal dimention (columns)
     */
    public void transposeAndSwap(int[][] A, int m, int n, int M, int N) {

    //  System.out.printf("transpose and swap %dx%d @(%d,%d)\n", M, N, m, n);
    
    // Base case, below constant, use a simple swap routine
    if (M < CONST && N < CONST) {
        //      System.out.println("base swap");
        int endRow = m + M;
        int endCol = n + N;
        for (int i = m; i < endRow; i++) {
        for (int j = n; j < endCol; j++) {
            //          System.out.println("transposing " + A[i][j] + " with " + A[j][i]);
            int tmp = A[i][j];
            A[i][j] = A[j][i];
            A[j][i] = tmp;
            System.out.printf("X %d %d %d %d\n", i, j, j, i);

        }
        }
    }

    // Recurse until base case for each of the four sub-matrices
    else {

        transposeAndSwap(A, m, n, M / 2, (int) Math.ceil(N / 2.0)); // uper right submatrix
        transposeAndSwap(A, m, n + (int) Math.ceil(N / 2.0), M / 2, N / 2); // lower left submatrix
        transposeAndSwap(A, m + M / 2, n, (int) Math.ceil(M / 2.0), (int) Math.ceil(N / 2.0));  // uper right submatrix
        transposeAndSwap(A, m + M / 2, n + (int) Math.ceil(N / 2.0), (int) Math.ceil(M / 2.0), N / 2);  // lower left submatrix

    }
    }
